import{o as n,c as s,a}from"./app.49b0587d.js";const p='{"title":"重建二叉树","description":"","frontmatter":{},"headers":[{"level":2,"title":"重建二叉树","slug":"重建二叉树"},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"代码","slug":"代码"}],"relativePath":"leetcode/offer/07. 重建二叉树.md","lastUpdated":1620219686272}',t={},o=a('<h2 id="重建二叉树"><a class="header-anchor" href="#重建二叉树" aria-hidden="true">#</a> 重建二叉树</h2><p>输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p><p>例如，给出</p><div class="language-"><pre><code>前序遍历 preorder = [3,9,20,15,7]\n中序遍历 inorder = [9,3,15,20,7]\n</code></pre></div><p>返回如下的二叉树：</p><div class="language-"><pre><code>    3\n   / \\\n  9  20\n    /  \\\n   15   7\n</code></pre></div><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>前序遍历的性质:</p><div class="language-"><pre><code>节点按照 [ 根节点 | 左子树 | 右子树 ] 排序\n</code></pre></div><p>中序遍历性质:</p><div class="language-"><pre><code>节点按照 [ 左子树 | 根节点 | 右子树 ] 排序\n</code></pre></div><p>因为前序的第一个是<strong>根节点</strong>, 而中序中, 根节点将树分成了左子树和右子树, 于是可以得到左右子树的中序遍历序列。</p><p>根据得到的下标位置， 得到左子树的长度，从而在前序遍历中找到下一个左子树的根节点(右子树, 同理)</p><p>root 的 位置 i</p><p>左子树</p><ul><li>根节点: root + 1</li><li>左边界: left</li><li>右边界: i - 1</li></ul><p>右子树</p><ul><li>根节点: i - left + root + 1</li><li>左边界: i + 1</li><li>右边界: right</li></ul><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">buildTree</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">preorder<span class="token punctuation">,</span> inorder</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>preorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">myBuildTree</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span>left<span class="token punctuation">,</span>right</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token comment">// node</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&gt;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>\n        <span class="token keyword">let</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token keyword">let</span> i <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token comment">// 左子树</span>\n        node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">myBuildTree</span><span class="token punctuation">(</span>root<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n        node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">myBuildTree</span><span class="token punctuation">(</span>i<span class="token operator">-</span>left<span class="token operator">+</span>root<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> node\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token function">myBuildTree</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>preorder<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',20);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
