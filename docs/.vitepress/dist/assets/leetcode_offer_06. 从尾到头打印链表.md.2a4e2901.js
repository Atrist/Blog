import{o as n,c as a,a as s}from"./app.06dc3881.js";const t='{"title":"从尾到头打印链表","description":"","frontmatter":{},"headers":[{"level":2,"title":"从尾到头打印链表","slug":"从尾到头打印链表"},{"level":3,"title":"示例 1：","slug":"示例-1："},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"代码","slug":"代码"}],"relativePath":"leetcode/offer/06. 从尾到头打印链表.md","lastUpdated":1620207172245}',p={},e=[s('<h2 id="从尾到头打印链表"><a class="header-anchor" href="#从尾到头打印链表" aria-hidden="true">#</a> 从尾到头打印链表</h2><p>输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。</p><h3 id="示例-1："><a class="header-anchor" href="#示例-1：" aria-hidden="true">#</a> 示例 1：</h3><div class="language-"><pre><code>输入：head = [1,3,2]\n输出：[2,3,1]\n</code></pre></div><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>借助 一次遍历 和 栈 来完成</p><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token comment">/**\n * @param {ListNode} head\n * @return {number[]}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">reversePrint</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> pre <span class="token operator">=</span> head<span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>pre <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pre<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n        pre <span class="token operator">=</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// left right 交换 </span>\n    <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>关于 <code>stack.reverse()</code> 代码替换</p><div class="language-js"><pre><code><span class="token keyword">let</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span>stack<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span>\n<span class="token keyword">let</span> temp\n<span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    temp <span class="token operator">=</span> stack<span class="token punctuation">[</span>left<span class="token punctuation">]</span>\n    stack<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">[</span>right<span class="token punctuation">]</span>\n    stack<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp\n    left<span class="token operator">++</span><span class="token punctuation">;</span>\n    right<span class="token operator">--</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">return</span> stack\n</code></pre></div>',10)];p.render=function(s,t,p,o,c,l){return n(),a("div",null,e)};export{t as __pageData,p as default};
