import{o as n,c as a,a as s}from"./app.06dc3881.js";const t='{"title":"二叉树的遍历","description":"","frontmatter":{},"headers":[{"level":2,"title":"二叉树的遍历","slug":"二叉树的遍历"},{"level":3,"title":"广度优先遍历","slug":"广度优先遍历"},{"level":3,"title":"深度优先遍历","slug":"深度优先遍历"},{"level":2,"title":"广度优先遍历","slug":"广度优先遍历-1"},{"level":2,"title":"深度优先遍历","slug":"深度优先遍历-1"},{"level":3,"title":"前序","slug":"前序"},{"level":3,"title":"中序","slug":"中序"},{"level":3,"title":"后序","slug":"后序"}],"relativePath":"leetcode/algorithm/二叉树的各种遍历.md","lastUpdated":1619859244706}',p={},o=[s('<h2 id="二叉树的遍历"><a class="header-anchor" href="#二叉树的遍历" aria-hidden="true">#</a> 二叉树的遍历</h2><p>二叉树根据遍历的方式，分为深度优先遍历和广度优先遍历</p><h3 id="广度优先遍历"><a class="header-anchor" href="#广度优先遍历" aria-hidden="true">#</a> 广度优先遍历</h3><p>广度优先遍历，就是先将一层的树全部遍历完之后，再往下走，在二叉树中便是层序遍历。</p><h3 id="深度优先遍历"><a class="header-anchor" href="#深度优先遍历" aria-hidden="true">#</a> 深度优先遍历</h3><p>在二叉树的深度优先遍历中，分为了三种</p><ol><li>前序(根-左-右)</li><li>中序(左-根-右)</li><li>后序(左-右-根)</li></ol><p>这里的前中后是根据根节点遍历的先后来命名的。</p><h2 id="广度优先遍历-1"><a class="header-anchor" href="#广度优先遍历-1" aria-hidden="true">#</a> 广度优先遍历</h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token parameter">tree</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>tree<span class="token punctuation">]</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">let</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 遍历</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n    node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n    node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="深度优先遍历-1"><a class="header-anchor" href="#深度优先遍历-1" aria-hidden="true">#</a> 深度优先遍历</h2><h3 id="前序"><a class="header-anchor" href="#前序" aria-hidden="true">#</a> 前序</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">dfs_front</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n  node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token function">dfs_front</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n  node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> <span class="token function">dfs_front</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> \n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="中序"><a class="header-anchor" href="#中序" aria-hidden="true">#</a> 中序</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">dfs_front</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token function">dfs_front</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n  node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> <span class="token function">dfs_front</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> \n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="后序"><a class="header-anchor" href="#后序" aria-hidden="true">#</a> 后序</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">dfs_front</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token function">dfs_front</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n  node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> <span class="token function">dfs_front</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> \n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',17)];p.render=function(s,t,p,e,c,u){return n(),a("div",null,o)};export{t as __pageData,p as default};
