import{o as n,c as a,a as s}from"./app.49b0587d.js";const t='{"title":"二叉搜索树的范围和","description":"","frontmatter":{},"headers":[{"level":2,"title":"二叉搜索树的范围和","slug":"二叉搜索树的范围和"},{"level":3,"title":"示例1：","slug":"示例1："},{"level":3,"title":"示例 2：","slug":"示例-2："},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"代码","slug":"代码"},{"level":3,"title":"优化","slug":"优化"},{"level":2,"title":"参考资料","slug":"参考资料"}],"relativePath":"leetcode/dayOne/938. 二叉搜索树的范围和.md","lastUpdated":1619581108549}',p={},o=s('<h2 id="二叉搜索树的范围和"><a class="header-anchor" href="#二叉搜索树的范围和" aria-hidden="true">#</a> 二叉搜索树的范围和</h2><p>给定二叉搜索树的根结点 <code>root</code>，返回值位于范围 <code>[low, high]</code> 之间的所有结点的值的和。</p><h3 id="示例1："><a class="header-anchor" href="#示例1：" aria-hidden="true">#</a> 示例1：</h3><p><img src="https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg" alt=""></p><div class="language-"><pre><code>输入：root = [10,5,15,3,7,null,18], low = 7, high = 15\n输出：32\n</code></pre></div><h3 id="示例-2："><a class="header-anchor" href="#示例-2：" aria-hidden="true">#</a> 示例 2：</h3><p><img src="https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg" alt=""></p><div class="language-"><pre><code>输入：root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\n输出：23\n</code></pre></div><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>它是一个二叉搜索树, 二叉搜索树的中序遍历会是一个递增序列, 所以可以进行判断，然后进行求和</p><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">rangeSumBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">dfs_b</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token function">dfs_b</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> low <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> res <span class="token operator">+=</span> node<span class="token punctuation">.</span>val\n        node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> <span class="token function">dfs_b</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">dfs_b</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> res\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="优化"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h3><p>进行对递归条件的再次优化, 即官方的深度优先遍历的实现</p><p>记当前节点为root, 分以下四种情况讨论:</p><ol><li>root 节点为空，返回 0</li><li>root 节点值大于 high, 则说明右子树上的无须在遍历，便返回左子树</li><li>root 节点值 小于low, , 则说明左子树上的无须在遍历，便返回右子树</li><li>oot 节点的值在 <code>[low,high]</code> 范围内， 返回三者之和</li></ol><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">rangeSumBST</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">rangeSumBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> low<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">rangeSumBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> root<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token function">rangeSumBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rangeSumBST</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="参考资料"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li><a href="https://leetcode-cn.com/problems/range-sum-of-bst/" target="_blank" rel="noopener noreferrer">leetcode题目链接</a></li><li><a href="https://leetcode-cn.com/problems/range-sum-of-bst/solution/er-cha-sou-suo-shu-de-fan-wei-he-by-leet-rpq7/" target="_blank" rel="noopener noreferrer">官方题解</a></li></ul>',19);p.render=function(s,t,p,e,c,l){return n(),a("div",null,[o])};export default p;export{t as __pageData};
