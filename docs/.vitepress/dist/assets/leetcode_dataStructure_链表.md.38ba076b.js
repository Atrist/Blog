import{o as n,c as a,a as s}from"./app.49b0587d.js";const t='{"title":"什么是链表","description":"","frontmatter":{},"headers":[{"level":2,"title":"什么是链表","slug":"什么是链表"},{"level":2,"title":"单向链表","slug":"单向链表"},{"level":3,"title":"代码实现","slug":"代码实现"},{"level":3,"title":"链表的遍历","slug":"链表的遍历"},{"level":3,"title":"链表的插入","slug":"链表的插入"},{"level":3,"title":"某一个节点的删除","slug":"某一个节点的删除"}],"relativePath":"leetcode/dataStructure/链表.md","lastUpdated":1619536428494}',p={},e=s('<h2 id="什么是链表"><a class="header-anchor" href="#什么是链表" aria-hidden="true">#</a> 什么是链表</h2><p>链表由独立的节点构成，每个节点之间使用变量进行连接。根据节点中存放的节点地址可以分为:</p><ol><li>单向链表(存放着下一跳的地址)</li><li>双向链表(存放着逻辑上的上一跳和下一跳)</li></ol><h2 id="单向链表"><a class="header-anchor" href="#单向链表" aria-hidden="true">#</a> 单向链表</h2><p>只存放这下一跳的地址。</p><h3 id="代码实现"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">listNode</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val \n  <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span>\nhead<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="链表的遍历"><a class="header-anchor" href="#链表的遍历" aria-hidden="true">#</a> 链表的遍历</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> point  <span class="token operator">=</span> head\n  <span class="token keyword">while</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    point <span class="token operator">=</span> point<span class="token punctuation">.</span>next\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="链表的插入"><a class="header-anchor" href="#链表的插入" aria-hidden="true">#</a> 链表的插入</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span>val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> point  <span class="token operator">=</span> head\n  <span class="token keyword">while</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    point <span class="token operator">=</span> point<span class="token punctuation">.</span>next\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 尾部插入</span>\n  point<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="某一个节点的删除"><a class="header-anchor" href="#某一个节点的删除" aria-hidden="true">#</a> 某一个节点的删除</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">nodeDelete</span><span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">.</span>next\n  <span class="token keyword">let</span> point  <span class="token operator">=</span> head\n  <span class="token keyword">while</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      point<span class="token punctuation">.</span>next <span class="token operator">=</span> point<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next\n      <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    point <span class="token operator">=</span> point<span class="token punctuation">.</span>next\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 尾部插入</span>\n<span class="token function">nodeDelete</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span>\n</code></pre></div>',13);p.render=function(s,t,p,o,c,l){return n(),a("div",null,[e])};export default p;export{t as __pageData};
