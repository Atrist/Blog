import{o as a,c as s,a as n}from"./app.06dc3881.js";const e='{"title":"选择器","description":"","frontmatter":{},"headers":[{"level":2,"title":"选择器","slug":"选择器"},{"level":2,"title":"基本选择器","slug":"基本选择器"},{"level":3,"title":"通用选择器","slug":"通用选择器"},{"level":3,"title":"元素选择器","slug":"元素选择器"},{"level":3,"title":"类选择器","slug":"类选择器"},{"level":3,"title":"ID选择器","slug":"id选择器"},{"level":3,"title":"属性选择器","slug":"属性选择器"},{"level":2,"title":"优先级","slug":"优先级"},{"level":2,"title":"高级选择器","slug":"高级选择器"},{"level":3,"title":"分组选择器","slug":"分组选择器"},{"level":3,"title":"后代组合器","slug":"后代组合器"},{"level":3,"title":"直接子代组合器","slug":"直接子代组合器"},{"level":3,"title":"一般兄弟组合器","slug":"一般兄弟组合器"},{"level":3,"title":"紧邻兄弟组合器","slug":"紧邻兄弟组合器"},{"level":3,"title":"列组合器","slug":"列组合器"},{"level":2,"title":"伪选择器（Pseudo）","slug":"伪选择器（pseudo）"},{"level":3,"title":"伪类","slug":"伪类"},{"level":3,"title":"伪元素","slug":"伪元素"},{"level":2,"title":"参考资料","slug":"参考资料"}],"relativePath":"web/css/选择器.md","lastUpdated":1620205672228}',t={},p=[n('<h2 id="选择器"><a class="header-anchor" href="#选择器" aria-hidden="true">#</a> 选择器</h2><p>选择器承担的是，从html文档中选择一个或多个标签来应用css的规则。</p><h2 id="基本选择器"><a class="header-anchor" href="#基本选择器" aria-hidden="true">#</a> 基本选择器</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors" target="_blank" rel="noopener noreferrer">通用选择器</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Type_selectors" target="_blank" rel="noopener noreferrer">元素选择器</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Class_selectors" target="_blank" rel="noopener noreferrer">类选择器</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/ID_selectors" target="_blank" rel="noopener noreferrer">ID选择器</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors" target="_blank" rel="noopener noreferrer">属性选择器</a></li></ul><h3 id="通用选择器"><a class="header-anchor" href="#通用选择器" aria-hidden="true">#</a> 通用选择器</h3><p>选择所有元素。（可选）可以将其限制为特定的名称空间或所有名称空间。</p><p>语法:<code>*</code></p><p>示例</p><div class="language-css"><pre><code><span class="token selector">*</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="元素选择器"><a class="header-anchor" href="#元素选择器" aria-hidden="true">#</a> 元素选择器</h3><p>按照给定的节点名称，选择所有匹配的元素。</p><p>语法: <code>element</code></p><p>示例:</p><div class="language-css"><pre><code><span class="token selector">p</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span>red\n<span class="token punctuation">}</span>\n</code></pre></div><p>匹配所有<code>p</code>元素标签</p><h3 id="类选择器"><a class="header-anchor" href="#类选择器" aria-hidden="true">#</a> 类选择器</h3><p>按照给定的 <code>class</code> 属性的值，选择所有匹配的元素。</p><p>语法: <code>.className</code></p><p>示例:</p><div class="language-css"><pre><code><span class="token selector">.index</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>index<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><p>匹配 <code>class=&#39;index&#39;</code>的标签元素(此处是<code>p</code>)</p><h3 id="id选择器"><a class="header-anchor" href="#id选择器" aria-hidden="true">#</a> ID选择器</h3><p>按照 <code>id</code> 属性选择一个与之匹配的元素。需要注意的是，一个文档中，每个 ID 属性都应当是唯一的。</p><p>语法: <code>#idName</code></p><p>示例:</p><div class="language-css"><pre><code><span class="token selector">#id</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="属性选择器"><a class="header-anchor" href="#属性选择器" aria-hidden="true">#</a> 属性选择器</h3><p>按照给定的属性，选择所有匹配的元素。</p><p>语法: <code>[attr]</code> <code>[attr=value]</code> <code>[attr~=value]</code> <code>[attr|=value]</code> <code>[attr^=value]</code> <code>[attr$=value]</code> <code>[attr*=value]</code></p><p>示例:</p><div class="language-css"><pre><code><span class="token selector">[disabled]</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> color<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled</span><span class="token punctuation">&gt;</span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="优先级"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h2><p>当多个选择器同时应用到(匹配到)某一个元素上, 选择器的优先级将决定哪些规则被应用，哪些规则被覆盖。</p><p>优先级就是分配给指定的 CSS 声明的一个权重，它由 匹配的选择器中的 每一种选择器类型的 数值 决定。</p><p>而当优先级与多个 CSS 声明中任意一个声明的优先级相等的时候，CSS 中最后的那个声明将会被应用到元素上。</p><table><thead><tr><th>Thousands</th><th>Hundreds</th><th>Tens</th><th>Ones</th></tr></thead><tbody><tr><td><code>style=&#39;&#39;</code></td><td>id选择器</td><td>类选择器, 属性选择器,伪类</td><td>类型选择器, 伪元素</td></tr></tbody></table><p><strong>!important 例外规则</strong></p><p>当在一个样式声明中使用一个 <code>!important</code> 规则时，此声明将覆盖任何其他声明。</p><blockquote><p><strong>通配选择符</strong>（*）<strong>关系选择符</strong>（+, &gt;, ~, &#39; &#39;, ||）和 <strong>否定伪类</strong> （:not()）对优先级没有影响。</p></blockquote><h2 id="高级选择器"><a class="header-anchor" href="#高级选择器" aria-hidden="true">#</a> 高级选择器</h2><h3 id="分组选择器"><a class="header-anchor" href="#分组选择器" aria-hidden="true">#</a> 分组选择器</h3><p><code>,</code> 是将不同的选择器组合在一起的方法，它选择所有能被列表中的任意一个选择器选中的节点, 即选择器的规则合并写法。</p><p>语法: <code>A,B</code></p><p>示例:</p><div class="language-css"><pre><code><span class="token selector">p,.class</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>color<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>class<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h3 id="后代组合器"><a class="header-anchor" href="#后代组合器" aria-hidden="true">#</a> 后代组合器</h3><p><code></code>（空格）组合器选择前一个元素的后代节点</p><p>语法: <code>A B</code></p><p>示例:</p><div class="language-css"><pre><code><span class="token selector">div span</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>匹配 所有位于 任意 <code>div</code>元素之内的 <code>span</code>元素</p><h3 id="直接子代组合器"><a class="header-anchor" href="#直接子代组合器" aria-hidden="true">#</a> 直接子代组合器</h3><p><code>&gt;</code> 组合器选择前一个元素的直接子代的节点。</p><p>语法: <code>A&gt;B</code></p><p>示例:</p><div class="language-css"><pre><code><span class="token selector">ul &gt; li</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>匹配 <strong>直接</strong> 嵌套在 <code>ul</code> 元素内的所有 <code>li</code> 元素</p><h3 id="一般兄弟组合器"><a class="header-anchor" href="#一般兄弟组合器" aria-hidden="true">#</a> 一般兄弟组合器</h3><p><code>~</code> 组合器选择兄弟元素，也就是说，后一个节点在前一个节点后面的任意位置，并且共享同一个父节点。</p><p>语法: <code>A ~ B</code></p><p>示例:</p><div class="language-css"><pre><code><span class="token selector">p ~ span</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>匹配 <code>p</code> 元素后 所有 <code>span</code> 元素</p><h3 id="紧邻兄弟组合器"><a class="header-anchor" href="#紧邻兄弟组合器" aria-hidden="true">#</a> 紧邻兄弟组合器</h3><p><code>+</code> 组合器选择相邻元素，即后一个元素紧跟在前一个之后，并且共享同一个父节点。</p><p>语法: <code>A + B</code></p><p>示例:</p><div class="language-css"><pre><code><span class="token selector">h2 + p</span><span class="token punctuation">{</span>\n   <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>匹配所有紧邻在 <code>h2</code> 元素后的 <code>p</code> 元素。</p><h3 id="列组合器"><a class="header-anchor" href="#列组合器" aria-hidden="true">#</a> 列组合器</h3><p><code>||</code> 组合器选择属于某个表格行的节点。</p><p>语法: <code>A || B</code></p><p>示例:</p><div class="language-css"><pre><code><span class="token selector">col || td</span><span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>匹配所有 <code>col</code> 作用域内的 <code>td</code> 元素。</p><h2 id="伪选择器（pseudo）"><a class="header-anchor" href="#伪选择器（pseudo）" aria-hidden="true">#</a> 伪选择器（Pseudo）</h2><h3 id="伪类"><a class="header-anchor" href="#伪类" aria-hidden="true">#</a> 伪类</h3><p><code>:</code> 伪选择器支持按照未被包含在文档树中的状态信息来选择元素。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes" target="_blank" rel="noopener noreferrer">详情</a></p><h3 id="伪元素"><a class="header-anchor" href="#伪元素" aria-hidden="true">#</a> 伪元素</h3><p><code>::</code> 伪选择器用于表示无法用 HTML 语义表达的实体。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements" target="_blank" rel="noopener noreferrer">详情</a></p><h2 id="参考资料"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity" target="_blank" rel="noopener noreferrer">css选择器优先级</a></li></ul>',88)];t.render=function(n,e,t,o,c,l){return a(),s("div",null,p)};export{e as __pageData,t as default};
