import{o as n,c as s,a}from"./app.06dc3881.js";const p='{"title":"粉刷房子 III","description":"","frontmatter":{},"headers":[{"level":2,"title":"粉刷房子 III","slug":"粉刷房子-iii"},{"level":3,"title":"示例1：","slug":"示例1："},{"level":3,"title":"示例 2：","slug":"示例-2："},{"level":3,"title":"示例 3：","slug":"示例-3："},{"level":3,"title":"示例 4：","slug":"示例-4："},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"代码","slug":"代码"},{"level":3,"title":"官方题解 动态规划","slug":"官方题解-动态规划"},{"level":3,"title":"动态规划 优化","slug":"动态规划-优化"},{"level":2,"title":"参考资料","slug":"参考资料"}],"relativePath":"leetcode/dayOne/1473. 粉刷房子 III.md","lastUpdated":1620313742409}',t={},o=[a('<h2 id="粉刷房子-iii"><a class="header-anchor" href="#粉刷房子-iii" aria-hidden="true">#</a> 粉刷房子 III</h2><p>在一个小城市里，有 <code>m</code> 个房子排成一排，你需要给每个房子涂上 <code>n</code> 种颜色之一（颜色编号为 <code>1</code> 到 <code>n</code>）。有的房子去年夏天已经涂过颜色了，所以这些房子不需要被重新涂色。</p><p>我们将连续相同颜色尽可能多的房子称为一个街区。（比方说 <code>houses = [1,2,2,3,3,2,1,1]</code> ，它包含 5 个街区 <code>[{1}, {2,2}, {3,3}, {2}, {1,1}]</code> 。）</p><p>给你一个数组 <code>houses</code> ，一个 <code>m * n</code> 的矩阵 <code>cost</code> 和一个整数 <code>target</code> ，其中：</p><ul><li><code>houses[i]</code>：是第 <code>i</code> 个房子的颜色，<code>0</code> 表示这个房子还没有被涂色。</li><li><code>cost[i][j]</code>：是将第 <code>i</code> 个房子涂成颜色 <code>j+1</code> 的花费。</li></ul><p>请你返回房子涂色方案的最小总花费，使得每个房子都被涂色后，恰好组成 <code>target</code> 个街区。如果没有可用的涂色方案，请返回 <code>-1</code> 。</p><h3 id="示例1："><a class="header-anchor" href="#示例1：" aria-hidden="true">#</a> 示例1：</h3><div class="language-"><pre><code>输入：houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\n输出：9\n解释：房子涂色方案为 [1,2,2,1,1]\n此方案包含 target = 3 个街区，分别是 [{1}, {2,2}, {1,1}]。\n涂色的总花费为 (1 + 1 + 1 + 1 + 5) = 9。\n</code></pre></div><h3 id="示例-2："><a class="header-anchor" href="#示例-2：" aria-hidden="true">#</a> 示例 2：</h3><div class="language-"><pre><code>输入：houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\n输出：11\n解释：有的房子已经被涂色了，在此基础上涂色方案为 [2,2,1,2,2]\n此方案包含 target = 3 个街区，分别是 [{2,2}, {1}, {2,2}]。\n给第一个和最后一个房子涂色的花费为 (10 + 1) = 11。\n</code></pre></div><h3 id="示例-3："><a class="header-anchor" href="#示例-3：" aria-hidden="true">#</a> 示例 3：</h3><div class="language-"><pre><code>输入：houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5\n输出：5\n</code></pre></div><h3 id="示例-4："><a class="header-anchor" href="#示例-4：" aria-hidden="true">#</a> 示例 4：</h3><div class="language-"><pre><code>输入：houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3\n输出：-1\n解释：房子已经被涂色并组成了 4 个街区，分别是 [{3},{1},{2},{3}] ，无法形成 target = 3 个街区。\n</code></pre></div><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><ol><li>先通过 <code>houses</code> 和 <code>target</code> 和 <code>n</code>, 分割出可行的街区方案</li><li>遍历并计算每一种方案的花费</li><li>输出最小的花费</li></ol><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><p>借助深度优先，找出所有可行的切割方案，然后再求出方案花费，计算最小值</p><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">minCost</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">houses<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> targetStree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token comment">//  dp 使用递归方式 求出 所有的分割方式</span>\n    <span class="token comment">// 上一个房子颜色， 此时街区的数量, 遍历到的位置</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">resDfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">houseColor<span class="token punctuation">,</span> k<span class="token punctuation">,</span> postion<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token comment">// 此时的颜色</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>postion <span class="token operator">&gt;</span> houses<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> \n        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">+</span> position <span class="token operator">&lt;</span> houses<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> \n        <span class="token keyword">if</span><span class="token punctuation">(</span>postion <span class="token operator">===</span> houses<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> k <span class="token operator">===</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    \n            targetStree<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>res<span class="token punctuation">]</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>houses<span class="token punctuation">[</span>postion<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>houses<span class="token punctuation">[</span>postion<span class="token punctuation">]</span><span class="token punctuation">)</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>houseColor <span class="token operator">===</span> houses<span class="token punctuation">[</span>postion<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">resDfs</span><span class="token punctuation">(</span>houses<span class="token punctuation">[</span>postion<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>postion<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>\n            <span class="token keyword">else</span> <span class="token function">resDfs</span><span class="token punctuation">(</span>houses<span class="token punctuation">[</span>postion<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>postion<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>\n            res<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">===</span> houseColor<span class="token punctuation">)</span> <span class="token function">resDfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>k<span class="token punctuation">,</span>postion<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>\n                <span class="token keyword">else</span> <span class="token function">resDfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>postion<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>\n                res<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>houses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>\n           <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n                <span class="token function">resDfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>\n                res<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token function">resDfs</span><span class="token punctuation">(</span>houses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span>houses<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>targetStree<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>\n    <span class="token keyword">let</span> resArray <span class="token operator">=</span> targetStree<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>houses<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                a <span class="token operator">+=</span> cost<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> a\n        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    \n    <span class="token punctuation">)</span>\n    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token operator">...</span>resArray<span class="token punctuation">)</span>\n    \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>算法的时间复杂度和空间复杂度都是(O(n<sup>n</sup>)), 在数据量比较庞大时，会出现堆栈溢出的情况，所以将递归调用转化成for循环来调用。</p><h3 id="官方题解-动态规划"><a class="header-anchor" href="#官方题解-动态规划" aria-hidden="true">#</a> 官方题解 动态规划</h3><p>为了方便编码和叙述:</p><ul><li>房子的编号为 [0, m-1]；</li><li>颜色的编号为 [0, n-1]，如果房子没有涂上颜色，那么记为 -1；</li><li>街区的编号为 [0, target−1]。</li></ul><p>设 <code>dp(i,j,k)</code> 表示将 [0,i] 的房子都涂上颜色，最末尾的第 i 个房子的颜色为 j，并且它属于第 k 个街区时，需要的最少花费。</p><p>状态变换方程</p><p>当 i-1 个房子的颜色为j0</p><ul><li>如果 house[i] !== -1, 说明第 i 个房子已经涂过颜色了, 那 houses[i] === j <ul><li>当 house[i] !== j,则说明是无效的状态 dp[i][j][k] = ∞</li><li>当 house[i] === j <ul><li>如果 j === j0, 则属于一个街区, dp[i][j][k] = dp[i-1][j][k]</li><li>如果 j !== j0, 则不属于一个街区, dp[i][j][k] = min(dp[i-1][j0][k-1])</li></ul></li></ul></li><li>如果 house[i] === -1, 说明第i个房子未涂色, 如果涂上j, 则为 cost[i][j] <ul><li>如果 j === j0, 则属于一个街区, dp[i][j][k] = dp[i-1][j][k] + cost[i][j]</li><li>如果 j !==j0, 则不属于一个街区, dp[i][j][k] = min(dp[i-1][j0][k-1]) + cost[i][j]</li></ul></li></ul><p>最终的答案是: min(dp[m-1][j][target-1])</p><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">minCost</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">houses<span class="token punctuation">,</span> cost<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    houses <span class="token operator">=</span> houses<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token operator">--</span>item<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n                           <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>\n                           <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// house i 的 循环</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// color j  的 循环</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment">// 如何记录 分区</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>houses<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> houses<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> j<span class="token punctuation">)</span> <span class="token keyword">continue</span>\n            <span class="token comment">// 记录每一个 dp(i,j,k) 的 值</span>\n            <span class="token comment">// 当 i 出现时, k值 最大能出现 i个</span>\n            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j0<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j0<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j0<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">===</span> j0<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                            <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\n                        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n                            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j0<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">!==</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">&amp;&amp;</span> houses<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>\n            <span class="token punctuation">}</span>  \n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> ans <span class="token operator">=</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">&gt;</span> dp<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>target<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> dp<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>target<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> ans <span class="token operator">===</span> Number<span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>ans\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="动态规划-优化"><a class="header-anchor" href="#动态规划-优化" aria-hidden="true">#</a> 动态规划 优化</h3><h2 id="参考资料"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li><a href="https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/" target="_blank" rel="noopener noreferrer">leetcode题目链接</a></li><li><a href="https://leetcode-cn.com/problems/capacity-to-ship-packages-within-d-days/solution/zai-d-tian-nei-song-da-bao-guo-de-neng-l-ntml/" target="_blank" rel="noopener noreferrer">官方题解</a></li></ul>',32)];t.render=function(a,p,t,e,c,u){return n(),s("div",null,o)};export{p as __pageData,t as default};
