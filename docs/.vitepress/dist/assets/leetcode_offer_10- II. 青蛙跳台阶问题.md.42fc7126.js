import{o as a,c as n,a as s}from"./app.06dc3881.js";const e='{"title":"II. 青蛙跳台阶问题","description":"","frontmatter":{},"headers":[{"level":2,"title":"II. 青蛙跳台阶问题","slug":"ii-青蛙跳台阶问题"},{"level":3,"title":"示例 1：","slug":"示例-1："},{"level":3,"title":"示例 2：","slug":"示例-2："},{"level":3,"title":"示例 3：","slug":"示例-3："},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"代码","slug":"代码"}],"relativePath":"leetcode/offer/10- II. 青蛙跳台阶问题.md","lastUpdated":1620221613689}',p={},t=[s('<h2 id="ii-青蛙跳台阶问题"><a class="header-anchor" href="#ii-青蛙跳台阶问题" aria-hidden="true">#</a> II. 青蛙跳台阶问题</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n 级的台阶总共有多少种跳法。</p><p>答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。</p><h3 id="示例-1："><a class="header-anchor" href="#示例-1：" aria-hidden="true">#</a> 示例 1：</h3><div class="language-"><pre><code>输入：n = 2\n输出：2\n</code></pre></div><h3 id="示例-2："><a class="header-anchor" href="#示例-2：" aria-hidden="true">#</a> 示例 2：</h3><div class="language-"><pre><code>输入：n = 7\n输出：21\n</code></pre></div><h3 id="示例-3："><a class="header-anchor" href="#示例-3：" aria-hidden="true">#</a> 示例 3：</h3><div class="language-"><pre><code>输入：n = 0\n输出：1\n</code></pre></div><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>设 dp(i) 为 跳上 i 台阶的跳法</p><div class="language-"><pre><code>dp(i) = dp(i-1) + dp(i-2)\n</code></pre></div><ul><li>dp(0) = 1</li><li>dp(1) = 1</li><li>dp(2) = 2</li></ul><p>这道题本质上跟菲波那数列是一样的，只是，初始值不同。</p><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">numWays</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>n2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    sum  <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token operator">+</span>n2<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">1000000007</span>\n    n1 <span class="token operator">=</span> n2\n    n2 <span class="token operator">=</span> sum\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> n1\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',16)];p.render=function(s,e,p,o,l,r){return a(),n("div",null,t)};export{e as __pageData,p as default};
