import{o as a,c as n,a as s}from"./app.06dc3881.js";const e='{"title":"数组异或操作","description":"","frontmatter":{},"headers":[{"level":2,"title":"数组异或操作","slug":"数组异或操作"},{"level":3,"title":"示例 1：","slug":"示例-1："},{"level":3,"title":"示例 2：","slug":"示例-2："},{"level":3,"title":"示例 3：","slug":"示例-3："},{"level":3,"title":"示例 4：","slug":"示例-4："},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"代码","slug":"代码"},{"level":3,"title":"官方的数学答案","slug":"官方的数学答案"}],"relativePath":"leetcode/dayOne/1486. 数组异或操作.md","lastUpdated":1620360762819}',t={},o=[s('<h2 id="数组异或操作"><a class="header-anchor" href="#数组异或操作" aria-hidden="true">#</a> 数组异或操作</h2><p>给你两个整数，<code>n</code> 和 <code>start</code> 。</p><p>数组 <code>nums</code> 定义为：<code>nums[i] = start + 2*i</code>（下标从 0 开始）且 <code>n == nums.length</code> 。</p><p>请返回 <code>nums</code> 中所有元素按位异或（XOR）后得到的结果。</p><h3 id="示例-1："><a class="header-anchor" href="#示例-1：" aria-hidden="true">#</a> 示例 1：</h3><div class="language-"><pre><code>输入：n = 5, start = 0\n输出：8\n解释：数组 nums 为 [0, 2, 4, 6, 8]，其中 (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8 。\n     &quot;^&quot; 为按位异或 XOR 运算符。\n</code></pre></div><h3 id="示例-2："><a class="header-anchor" href="#示例-2：" aria-hidden="true">#</a> 示例 2：</h3><div class="language-"><pre><code>输入：n = 4, start = 3\n输出：8\n解释：数组 nums 为 [3, 5, 7, 9]，其中 (3 ^ 5 ^ 7 ^ 9) = 8.\n</code></pre></div><h3 id="示例-3："><a class="header-anchor" href="#示例-3：" aria-hidden="true">#</a> 示例 3：</h3><div class="language-"><pre><code>输入：n = 1, start = 7\n输出：7\n</code></pre></div><h3 id="示例-4："><a class="header-anchor" href="#示例-4：" aria-hidden="true">#</a> 示例 4：</h3><div class="language-"><pre><code>输入：n = 10, start = 5\n输出：2\n</code></pre></div><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>简单的话, 按照题目模拟就行</p><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">xorOperation</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> start</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> ans <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        ans <span class="token operator">^=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span>  ans\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="官方的数学答案"><a class="header-anchor" href="#官方的数学答案" aria-hidden="true">#</a> 官方的数学答案</h3><p>记 ⊕ 为异或运算，异或运算满足以下性质：</p>',18)];t.render=function(s,e,t,p,r,c){return a(),n("div",null,o)};export{e as __pageData,t as default};
