import{o as n,c as a,a as s}from"./app.06dc3881.js";const e='{"title":"叶子相似的树","description":"","frontmatter":{},"headers":[{"level":2,"title":"叶子相似的树","slug":"叶子相似的树"},{"level":3,"title":"示例 1：","slug":"示例-1："},{"level":3,"title":"示例 2：","slug":"示例-2："},{"level":3,"title":"示例 3：","slug":"示例-3："},{"level":3,"title":"示例 4：","slug":"示例-4："},{"level":3,"title":"示例 5：","slug":"示例-5："},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"代码","slug":"代码"},{"level":2,"title":"参考资料","slug":"参考资料"}],"relativePath":"leetcode/dayOne/872. 叶子相似的树.md","lastUpdated":1620578221675}',t={},o=[s('<h2 id="叶子相似的树"><a class="header-anchor" href="#叶子相似的树" aria-hidden="true">#</a> 叶子相似的树</h2><p>请考虑一棵二叉树上所有的叶子，这些叶子的值按从左到右的顺序排列形成一个 叶值序列 。</p><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png" alt=""></p><p>举个例子，如上图所示，给定一棵叶值序列为 <code>(6, 7, 4, 9, 8)</code> 的树。</p><p>如果有两棵二叉树的叶值序列是相同，那么我们就认为它们是 <strong>叶相似</strong> 的。</p><p>如果给定的两个根结点分别为 root1 和 root2 的树是叶相似的，则返回 true；否则返回 false 。</p><h3 id="示例-1："><a class="header-anchor" href="#示例-1：" aria-hidden="true">#</a> 示例 1：</h3><p><img src="https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-1.jpg" alt=""></p><div class="language-"><pre><code>输入：root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\n输出：true\n</code></pre></div><h3 id="示例-2："><a class="header-anchor" href="#示例-2：" aria-hidden="true">#</a> 示例 2：</h3><div class="language-"><pre><code>输入：root1 = [1], root2 = [1]\n输出：true\n</code></pre></div><h3 id="示例-3："><a class="header-anchor" href="#示例-3：" aria-hidden="true">#</a> 示例 3：</h3><div class="language-"><pre><code>输入：root1 = [1], root2 = [2]\n输出：false\n</code></pre></div><h3 id="示例-4："><a class="header-anchor" href="#示例-4：" aria-hidden="true">#</a> 示例 4：</h3><div class="language-"><pre><code>输入：root1 = [1,2], root2 = [2,2]\n输出：true\n</code></pre></div><h3 id="示例-5："><a class="header-anchor" href="#示例-5：" aria-hidden="true">#</a> 示例 5：</h3><p><img src="https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-2.jpg" alt=""></p><div class="language-"><pre><code>输入：root1 = [1,2,3], root2 = [1,3,2]\n输出：false\n</code></pre></div><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>可以借助 dfs，bfs等搜索方法 找到叶节点，最后对比两个数生成叶节点是否相同</p><p>可以借助 toString() 和 join() 等函数来生成 字符串来对比是否相同。</p><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">leafSimilar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">root1<span class="token punctuation">,</span> root2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">let</span> res2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right<span class="token operator">===</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>\n        node<span class="token punctuation">.</span>left <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span>res<span class="token punctuation">)</span>\n        node<span class="token punctuation">.</span>right <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span>res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token function">dfs</span><span class="token punctuation">(</span>root1<span class="token punctuation">,</span>res1<span class="token punctuation">)</span>\n    <span class="token function">dfs</span><span class="token punctuation">(</span>root2<span class="token punctuation">,</span>res2<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> res1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> res2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="参考资料"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li><a href="https://leetcode-cn.com/problems/leaf-similar-trees/" target="_blank" rel="noopener noreferrer">leetcode题目链接</a></li><li><a href="https://leetcode-cn.com/problems/leaf-similar-trees/solution/xie-zi-xiang-si-de-shu-by-leetcode-solut-z0w6/" target="_blank" rel="noopener noreferrer">官方题解</a></li></ul>',25)];t.render=function(s,e,t,p,l,c){return n(),a("div",null,o)};export{e as __pageData,t as default};
