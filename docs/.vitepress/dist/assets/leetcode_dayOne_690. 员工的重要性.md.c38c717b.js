import{o as n,c as s,a}from"./app.06dc3881.js";const p='{"title":"员工的重要性","description":"","frontmatter":{},"headers":[{"level":2,"title":"员工的重要性","slug":"员工的重要性"},{"level":3,"title":"示例：","slug":"示例："},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"深度优先","slug":"深度优先"},{"level":3,"title":"广度优先","slug":"广度优先"},{"level":2,"title":"参考资料","slug":"参考资料"}],"relativePath":"leetcode/dayOne/690. 员工的重要性.md","lastUpdated":1619841980645}',t={},e=[a('<h2 id="员工的重要性"><a class="header-anchor" href="#员工的重要性" aria-hidden="true">#</a> 员工的重要性</h2><p>给定一个保存员工信息的数据结构，它包含了员工 <strong>唯一的 id</strong> ，<strong>重要度</strong> 和 <strong>直系下属的 id</strong> 。</p><p>比如，员工 1 是员工 2 的领导，员工 2 是员工 3 的领导。他们相应的重要度为 15 , 10 , 5 。那么员工 1 的数据结构是 [1, 15, [2]] ，员工 2的 数据结构是 [2, 10, [3]] ，员工 3 的数据结构是 [3, 5, []] 。注意虽然员工 3 也是员工 1 的一个下属，但是由于 <strong>并不是直系</strong> 下属，因此没有体现在员工 1 的数据结构中。</p><p>现在输入一个公司的所有员工信息，以及单个员工 id ，返回这个员工和他所有下属的重要度之和。</p><h3 id="示例："><a class="header-anchor" href="#示例：" aria-hidden="true">#</a> 示例：</h3><div class="language-"><pre><code>输入：[[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\n输出：11\n解释：\n员工 1 自身的重要度是 5 ，他有两个直系下属 2 和 3 ，而且 2 和 3 的重要度均为 3 。因此员工 1 的总重要度是 5 + 3 + 3 = 11 。\n</code></pre></div><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>使用 遍历 求和的方式</p><ul><li>找到 目的员工 id</li><li>找到 目的员工 id 的下属员工</li></ul><h3 id="深度优先"><a class="header-anchor" href="#深度优先" aria-hidden="true">#</a> 深度优先</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">GetImportance</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">employees<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// 使用 map 提高查询效率</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> employee <span class="token keyword">of</span> employees<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>id<span class="token punctuation">,</span> employee<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> employee <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n    <span class="token keyword">let</span> total <span class="token operator">=</span> employee<span class="token punctuation">.</span>importance\n    <span class="token keyword">let</span> subordinates <span class="token operator">=</span> employee<span class="token punctuation">.</span>subordinates\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> id <span class="token keyword">of</span> subordinates<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      total <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> total\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="广度优先"><a class="header-anchor" href="#广度优先" aria-hidden="true">#</a> 广度优先</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">GetImportance</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">employees<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> employee <span class="token keyword">of</span> employees<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>id<span class="token punctuation">,</span> employee<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> total <span class="token operator">=</span>  <span class="token number">0</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">const</span> employee <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    total <span class="token operator">+=</span> employee<span class="token punctuation">.</span>importance\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> id <span class="token keyword">of</span> employee<span class="token punctuation">.</span>subordinates<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> total\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="参考资料"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li><a href="https://leetcode-cn.com/problems/employee-importance/" target="_blank" rel="noopener noreferrer">leetcode题目链接</a></li><li><a href="https://leetcode-cn.com/problems/employee-importance/solution/yuan-gong-de-zhong-yao-xing-by-leetcode-h6xre/" target="_blank" rel="noopener noreferrer">官方题解</a></li></ul>',15)];t.render=function(a,p,t,o,c,l){return n(),s("div",null,e)};export{p as __pageData,t as default};
