import{o as n,c as a,a as s}from"./app.49b0587d.js";const t='{"title":"二维数组中的查找","description":"","frontmatter":{},"headers":[{"level":2,"title":"二维数组中的查找","slug":"二维数组中的查找"},{"level":3,"title":"示例:","slug":"示例"},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"算法流程","slug":"算法流程"},{"level":3,"title":"代码","slug":"代码"}],"relativePath":"leetcode/offer/04. 二维数组中的查找.md","lastUpdated":1619880719858}',p={},e=s('<h2 id="二维数组中的查找"><a class="header-anchor" href="#二维数组中的查找" aria-hidden="true">#</a> 二维数组中的查找</h2><p>在一个 <code>n * m</code> 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><h3 id="示例"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例:</h3><p>现有矩阵 matrix 如下：</p><div class="language-"><pre><code>[\n  [1,   4,  7, 11, 15],\n  [2,   5,  8, 12, 19],\n  [3,   6,  9, 16, 22],\n  [10, 13, 14, 17, 24],\n  [18, 21, 23, 26, 30]\n]\n</code></pre></div><p>给定 <code>target = 5</code>，返回 true。</p><p>给定 <code>target = 20</code>，返回 false。</p><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>二维数组的特点</p><ol><li>从左到右递增</li><li>从上到下递增</li></ol><p>特殊点</p><ol><li>左上 最小值</li><li>右下 最大值</li><li>左下 中间值</li></ol><h3 id="算法流程"><a class="header-anchor" href="#算法流程" aria-hidden="true">#</a> 算法流程</h3><p>借助 左下 [row, col] 进行 二分查找</p><ol><li>target &gt; now, row++</li><li>target &lt; now, col--</li><li>target === now, return</li></ol><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">findNumberIn2DArray</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 从 左下角 开始更迭</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>\n    <span class="token keyword">let</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> cols <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length\n    <span class="token keyword">let</span>  row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> col <span class="token operator">=</span> cols<span class="token operator">-</span><span class="token number">1</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>row<span class="token operator">&lt;</span>rows <span class="token operator">&amp;&amp;</span> col<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> num <span class="token operator">=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">===</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&gt;</span> now<span class="token punctuation">)</span> row<span class="token operator">++</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> now<span class="token punctuation">)</span> col<span class="token operator">--</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',17);p.render=function(s,t,p,o,l,c){return n(),a("div",null,[e])};export default p;export{t as __pageData};
