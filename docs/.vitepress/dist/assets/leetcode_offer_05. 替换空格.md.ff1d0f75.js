import{o as a,c as s,a as n}from"./app.06dc3881.js";const e='{"title":"替换空格","description":"","frontmatter":{},"headers":[{"level":2,"title":"替换空格","slug":"替换空格"},{"level":3,"title":"示例 1：","slug":"示例-1："},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"代码","slug":"代码"}],"relativePath":"leetcode/offer/05. 替换空格.md","lastUpdated":1620206293794}',t={},p=[n('<h2 id="替换空格"><a class="header-anchor" href="#替换空格" aria-hidden="true">#</a> 替换空格</h2><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成<code>&quot;%20&quot;</code>。</p><h3 id="示例-1："><a class="header-anchor" href="#示例-1：" aria-hidden="true">#</a> 示例 1：</h3><div class="language-"><pre><code>输入：s = &quot;We are happy.&quot;\n输出：&quot;We%20are%20happy.&quot;\n</code></pre></div><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>遍历 字符串， 判断 字符 c, 新建一个 s 字符串</p><ul><li>如果 c === &#39; &#39; 则，添加一个<code>%20</code></li><li>如果 c !== &#39; &#39; 则，添加一个 c</li></ul><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token comment">/**\n * @param {string} s\n * @return {string}\n */</span>\n<span class="token keyword">var</span> <span class="token function-variable function">replaceSpace</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token keyword">of</span> s<span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">===</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token string">&#39;%20&#39;</span>\n      <span class="token keyword">else</span> res <span class="token operator">+=</span> c\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> res\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div>',9)];t.render=function(n,e,t,o,c,r){return a(),s("div",null,p)};export{e as __pageData,t as default};
