import{o as n,c as s,a}from"./app.49b0587d.js";const p='{"title":"整数反转","description":"","frontmatter":{},"headers":[{"level":2,"title":"整数反转","slug":"整数反转"},{"level":3,"title":"示例 1:","slug":"示例-1"},{"level":3,"title":"示例 2:","slug":"示例-2"},{"level":3,"title":"示例 3:","slug":"示例-3"},{"level":3,"title":"注意:","slug":"注意"},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"完整代码","slug":"完整代码"},{"level":3,"title":"优化","slug":"优化"}],"relativePath":"leetcode/dayOne/7. 整数反转.md","lastUpdated":1620015936032}',t={},o=a('<h2 id="整数反转"><a class="header-anchor" href="#整数反转" aria-hidden="true">#</a> 整数反转</h2><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><h3 id="示例-1"><a class="header-anchor" href="#示例-1" aria-hidden="true">#</a> 示例 1:</h3><div class="language-"><pre><code>输入: 123\n输出: 321\n</code></pre></div><h3 id="示例-2"><a class="header-anchor" href="#示例-2" aria-hidden="true">#</a> 示例 2:</h3><div class="language-"><pre><code>输入: -123\n输出: -321\n</code></pre></div><h3 id="示例-3"><a class="header-anchor" href="#示例-3" aria-hidden="true">#</a> 示例 3:</h3><div class="language-"><pre><code>输入: 120\n输出: 21\n</code></pre></div><h3 id="注意"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意:</h3><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2<sup>31</sup>, 2<sup>31</sup> − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><p>在js中，最大的整数安全数 <code>Number.MAX_SAFE_INTEGER</code> 为 2<sup>53</sup> - 1, 所以在这里我们需要手动设置环境安全数，借助 <code>Math.pow</code></p><div class="language-js"><pre><code><span class="token keyword">const</span> <span class="token constant">INT_MAX</span>  <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 2147483647</span>\n<span class="token keyword">const</span> <span class="token constant">INT_MIN</span>  <span class="token operator">=</span> <span class="token operator">-</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>逐位进行分解和判断</p><div class="language-js"><pre><code><span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment">// 最低位数</span>\n    <span class="token keyword">let</span> pop <span class="token operator">=</span> x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>\n    <span class="token comment">// 最高位数</span>\n    x <span class="token operator">=</span>  <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>rev <span class="token operator">&gt;</span> <span class="token constant">INT_MAX</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>rev <span class="token operator">==</span> <span class="token constant">INT_MAX</span><span class="token operator">/</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> pop <span class="token operator">&gt;</span> <span class="token number">7</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>rev <span class="token operator">&lt;</span> <span class="token constant">INT_MIN</span> <span class="token operator">/</span><span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>rev <span class="token operator">==</span> <span class="token constant">INT_MIN</span> <span class="token operator">/</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> pop <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    rev <span class="token operator">=</span> rev <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> pop<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="完整代码"><a class="header-anchor" href="#完整代码" aria-hidden="true">#</a> 完整代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> rev <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">const</span> <span class="token constant">INT_MAX</span>  <span class="token operator">=</span>  <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2147483647</span>\n    <span class="token keyword">const</span> <span class="token constant">INT_MIN</span>  <span class="token operator">=</span> <span class="token operator">-</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> pop <span class="token operator">=</span> x <span class="token operator">%</span><span class="token number">10</span>\n        x <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>rev <span class="token operator">&gt;</span> <span class="token constant">INT_MAX</span> <span class="token operator">||</span> <span class="token punctuation">(</span>rev <span class="token operator">==</span> <span class="token constant">INT_MAX</span> <span class="token operator">&amp;&amp;</span> pop <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>rev <span class="token operator">&lt;</span> <span class="token constant">INT_MIN</span> <span class="token operator">||</span> <span class="token punctuation">(</span>rev <span class="token operator">==</span> <span class="token constant">INT_MIN</span> <span class="token operator">&amp;&amp;</span> pop<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>\n        rev <span class="token operator">=</span> rev<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>pop\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> rev\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="优化"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h3><p>借助位运算优化</p><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">reverse</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>\n      x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>result <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">===</span> result <span class="token operator">?</span> result <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>按位操作符（Bitwise operators） 将其操作数（operands）当作32位的比特序列（由0和1组成）, 详见<a href="https://developer.mozilla.org/zh-CN/docs/conflicting/Web/JavaScript/Reference/Operators_7c8eb9475d97a4a734c5991857698560#bitwise_or" target="_blank" rel="noopener noreferrer">mdn |</a></p>',21);t.render=function(a,p,t,e,c,r){return n(),s("div",null,[o])};export default t;export{p as __pageData};
