import{o as n,c as a,a as s}from"./app.06dc3881.js";const p='{"title":"砖墙","description":"","frontmatter":{},"headers":[{"level":2,"title":"砖墙","slug":"砖墙"},{"level":3,"title":"示例 1：","slug":"示例-1："},{"level":3,"title":"示例 2：","slug":"示例-2："},{"level":2,"title":"分析","slug":"分析"},{"level":3,"title":"算法流程","slug":"算法流程"},{"level":3,"title":"代码","slug":"代码"},{"level":3,"title":"优化","slug":"优化"},{"level":2,"title":"参考资料","slug":"参考资料"}],"relativePath":"leetcode/dayOne/554. 砖墙.md","lastUpdated":1619933044349}',t={},o=[s('<h2 id="砖墙"><a class="header-anchor" href="#砖墙" aria-hidden="true">#</a> 砖墙</h2><p>你的面前有一堵矩形的、由 n 行砖块组成的砖墙。这些砖块高度相同（也就是一个单位高）但是宽度不同。每一行砖块的宽度之和应该相等。</p><p>你现在要画一条 <strong>自顶向下</strong> 的、穿过 <strong>最少</strong> 砖块的垂线。如果你画的线只是从砖块的边缘经过，就不算穿过这块砖。<strong>你不能沿着墙的两个垂直边缘之一画线，这样显然是没有穿过一块砖的</strong>。</p><p>给你一个二维数组 <code>wall</code> ，该数组包含这堵墙的相关信息。其中，<code>wall[i]</code> 是一个代表从左至右每块砖的宽度的数组。你需要找出怎样画才能使这条线 <strong>穿过的砖块数量最少</strong> ，并且返回 <strong>穿过的砖块数量</strong> 。</p><h3 id="示例-1："><a class="header-anchor" href="#示例-1：" aria-hidden="true">#</a> 示例 1：</h3><p><img src="https://assets.leetcode.com/uploads/2021/04/24/cutwall-grid.jpg" alt=""></p><div class="language-"><pre><code>输入：wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n输出：2\n</code></pre></div><h3 id="示例-2："><a class="header-anchor" href="#示例-2：" aria-hidden="true">#</a> 示例 2：</h3><div class="language-"><pre><code>输入：wall = [[1],[1],[1]]\n输出：3\n</code></pre></div><h2 id="分析"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h2><blockquote><p>任意一条垂线，其穿过的砖块数量加上从边缘经过的砖块数量之和是一个定值，即砖墙的高度。</p></blockquote><p>可以转为求 经过边愿的最大值, 借助 map 来记录每一行的右边缘距离(最右边愿不算)</p><h3 id="算法流程"><a class="header-anchor" href="#算法流程" aria-hidden="true">#</a> 算法流程</h3><ol><li>行遍历 <ol><li>判断右边愿累积距离是否在map中存在</li><li>若有，加1</li><li>若无，置1</li></ol></li><li>遍历 map <ol><li>找到最大的边缘数</li></ol></li></ol><h3 id="代码"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">leastBricks</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">wall</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">let</span> height <span class="token operator">=</span> wall<span class="token punctuation">.</span>length\n    <span class="token keyword">let</span> sumWidth <span class="token operator">=</span> wall<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> row <span class="token keyword">of</span> wall<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">let</span> width <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> col <span class="token keyword">of</span> row<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            width <span class="token operator">+=</span> col\n            <span class="token keyword">if</span><span class="token punctuation">(</span>width <span class="token operator">===</span> sumWidth<span class="token punctuation">)</span> <span class="token keyword">continue</span>\n            map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">let</span> maxCount <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>_<span class="token punctuation">,</span>i<span class="token punctuation">]</span> <span class="token keyword">of</span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        maxCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxCount<span class="token punctuation">,</span>i<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> height <span class="token operator">-</span> maxCount\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="优化"><a class="header-anchor" href="#优化" aria-hidden="true">#</a> 优化</h3><p>借助 <code>数组</code> 来完成右边缘的记录，使用 <code>for in</code> 来完成<code>max</code> 的求值</p><div class="language-js"><pre><code><span class="token keyword">var</span> <span class="token function-variable function">leastBricks</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">wall</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> countMap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    wall<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">row</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> row<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            i <span class="token operator">+=</span> row<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            countMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> countMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>countMap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> x <span class="token keyword">in</span> countMap<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>countMap<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                max <span class="token operator">=</span> countMap<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> wall<span class="token punctuation">.</span>length <span class="token operator">-</span> max<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="参考资料"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li><a href="https://leetcode-cn.com/problems/brick-wall/" target="_blank" rel="noopener noreferrer">leetcode题目链接</a></li><li><a href="https://leetcode-cn.com/problems/brick-wall/solution/zhuan-qiang-by-leetcode-solution-2kls/" target="_blank" rel="noopener noreferrer">官方题解</a></li></ul>',21)];t.render=function(s,p,t,e,c,l){return n(),a("div",null,o)};export{p as __pageData,t as default};
